Program 		:= 	Import* Command+

Import			:=	FROM IDENTIFIER IMPORT IDENTIFIER SEMICOLON 

Command			:= 	Declaration
				|	Expression
				|	Statement

Declaration		:=	VarDeclaration
				|	ScopeDeclaration
VarDeclaration	:=	TYPE IDENTIFIER Assignment? SEMICOLON
ScopeDeclaration:=	FUNC IDENTIFIER LPAREN Argument* RPAREN RETURNS TYPE FuncScope
				|	CLASS IDENTIFIER EXTENDS IDENTIFIER ClassScope
FuncScope		:=	LCURLY Command* Statement RCURLY
ClassScope		:=	LCURLY Declaration* RCURLY

Argument		:=	TYPE IDENTIFIER (COMMA Argument)?

Expression		:=	ExpressionAO
				|	ArrayLiteral
ExpressionAO	:=	ExpresseionLO (AND expressionLO | OR expressionLO)
ExpressionLO	:= 	ExpressionPM ((LT^ | GT^ | LTE^ | GTE^ | EQ^ | NEQ^) ExpressionPM)*
ExpressionPM	:= 	ExpressionMD ((PLUS^ | MINUS^) ExpressionMD)*
ExpressionMD    :=	ExpressionPW ((MULTIPL^ | DIVIDES^) ExpressionPW)*
ExpressionPW	:=	Operand (POWER Operand)*

Statement 		:=	IfStatement
				|	WhileStatement
				|	ReturnStatement
				|	ForStatement
				|	BREAK SEMICOLON
				|	CONTINUE SEMICOLON
IfStatement		:=	IF LPAREN Expression RPAREN LCURLY Command* RCURLY 
					(ELSE LCURLY Command* RCURLY)?
WhileStatement	:=	WHILE LPAREN Expression RPAREN LCURLY Command* RCURLY
ReturnStatement	:=	RETURN Expression SEMICOLON
ForStatement	:=	FOR LPAREN IDENTIFIER IN Expression RPAREN LCURLY Command* RCURLY

Operand			:=	LPAREN Expression RPAREN
				|	IDENTIFIER
				|	NUMBER

ArrayLiteral	:=	LBLOCK ArrayValueList? RBLOCK
ArrayValueList	:=	Expression (COMMA ArrayValueList)?

Assignment		:=	ASSIGN Expression

IDENTIFIER 		:=	LETTER (LETTER | DIGIT)

NUMBER 			:=	DIGIT+

TYPE			:=	PrimitiveType
				|	CompositeType

PrimitiveType	:= 	INTEGER
				|	BOOLEAN
				|	CHARACTER

CompositeType	:=	ARRAY PrimitiveType LBLOCK Expression RBLOCK


LETTER 		:= 	LOWER 
			|	UPPER
LOWER		:=	a..z
UPPER 		:=	A..Z
DIGIT 		:=	0..9

COLON       := ':'     
SEMICOLON   := ';'     
LPAREN      := '('     
RPAREN      := ')'  
LCURLY 		:= '{'
RCURLY 		:= '}'
LBLOCK 		:= '['
RBLOCK 		:= ']'  
COMMA       := ','     

// operators
ASSIGN     	:= '='    	
PLUS        := '+'     
MINUS       := '-'     
DIVIDES     := '/'     
MULTIPL     := '*'     
POWER		:= '^'		
LT          := '<'     
GT          := '>'     
GTE         := '>='    
LTE         := '<='    
EQ          := '=='    
NEQ         := '!='    

// keywords
PROGRAM     := 'program'   
INTEGER     := 'int'   	
CHARACTER	:= 'char'		
BOOLEAN		:= 'bool'		
IF          := 'if'        
ELSE        := 'else'      
WHILE       := 'while'     
FOR 		:= 'for'
IN 			:= 'in'
FUNC 		:= 'func'		
RETURNS 	:= 'returns'	
CLASS 		:= 'class'		
EXTENDS		:= 'extends'	
RETURN 		:= 'return'	
ARRAY 		:= 'array'
